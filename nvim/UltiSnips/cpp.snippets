# ------------------------------------------------------------------------------
# Global function

global !p
import re

def ife(value, true_string, false_string = ''):
		if t[value]:
				snip.rv = true_string
		else:
				snip.rv = false_string

def ifne(value, true_string, false_string = ''):
		if not t[value]:
				snip.rv = true_string
		else:
				snip.rv = false_string

def parse_args(line):
		args = re.sub("<.*?>", "", line)
		args = re.findall(".+? ([a-zA-Z_]+)[,)]", args)
		return args

endglobal

# ------------------------------------------------------------------------------
# Protected defines

# PROJECT_PATH_TO_FILE_FILE_EXT_
snippet head "protected ifndef " b
#ifndef ${1:`!p
file_path = vim.eval("expand('%')")
path = file_path + '_'
path = re.sub("[^a-zA-Z]", "_", path)
snip.rv = path.upper()
`}
#define $1
$0
#endif /* $1 */
endsnippet

# ------------------------------------------------------------------------------
# Includes
snippet cin "c include" b
#include "${1:string}.h"${0}
endsnippet

snippet in "cpp include" b
#include <${1:cstring}>${0}
endsnippet

snippet io "include iostream" b
#include <iostream>
using namespace std;${0}
endsnippet

# ------------------------------------------------------------------------------
# Mains
snippet tmain "test main" b
#include <iostream>
using namespace std;

int main() {
	${0}
	return 0;
}
endsnippet

snippet main "main" b
int main() {
	${0}
	return 0;
}
endsnippet

# ------------------------------------------------------------------------------
# If
snippet if "if" s
if ($1) {
	$2
}$0
endsnippet

snippet elif "else if" s
else if ($1) {
	$2
}$0
endsnippet

snippet el "else" s
else {
	$1
}$0
endsnippet

snippet switch "switch(value)" b
switch (${1:value}) {
	case: ${2:value1}
		${3}
	break;
}$0
endsnippet

snippet case "switch case" b
case: ${1}
	${2}
	break;
$0
endsnippet

# ------------------------------------------------------------------------------
# For
snippet range "range from 0 to $1" bs
for (int i = 0; i < $1; i++) {
	$2
}$0
endsnippet

snippet for "for" bs
for ($1) {
	$2
}$0
endsnippet

snippet rbase "range base for" bs
for (auto& ${1:i} : $2) {
	$3
}$0
endsnippet

snippet rbasec "range base for" bs
for (const auto& ${1:i} : $2) {
	$3
}$0
endsnippet

snippet wh "while" bs
while ($1) {
	$2
}$0
endsnippet

# ------------------------------------------------------------------------------
# Cout
snippet cout "cout << 'visual' << endl;"
cout << "${1:${VISUAL}}" << endl;$0
endsnippet

snippet vout "cout << 'var: ' << var << endl;"
cout << "`!p snip.rv = t[1].replace('"','\\"')`: " << ${1:${VISUAL}} << endl;$0
endsnippet

snippet scout "std::cout << 'visual' << std::endl;"
cout << "${1:${VISUAL}}" << endl;$0
endsnippet

snippet svout "std::cout << 'var: ' << var << std::endl;"
std::cout << "`!p snip.rv = t[1].replace('"','\\"')`: " << ${1:${VISUAL}} << std::endl;$0
endsnippet

# ------------------------------------------------------------------------------
# Structures / Classes

snippet st "define struct" b
struct ${1:struct_name_t} {
	${2}
};$0
endsnippet

snippet cl "define class" bs
class ${1:`!p
class_name = list(snip.basename)
class_name[0] = class_name[0].upper()
snip.rv = "".join(class_name)
`} `!p ife(2, ": public ")`${2:Class_name}`!p ife(2, " ")`{
public:
	${4:$1(${5});}${6}
};$0
endsnippet

snippet cm "class member"
${1:member_name}();$0
endsnippet

# ------------------------------------------------------------------------------
# Aliases

snippet .v "class virtual"
virtual
endsnippet

snippet .o "class override"
override
endsnippet

snippet .f "class final"
final
endsnippet

snippet .c "const"
const
endsnippet

snippet def "= default;"
= default;
endsnippet

snippet del "= delete;"
= delete;
endsnippet

# ------------------------------------------------------------------------------
# Google tests

snippet t "test" b
TEST(${1}) {
	${2}
}$0
endsnippet

snippet tf "test fixture" b
TEST_F(${1}) {
	${2}
}$0
endsnippet

snippet tp "test parameterize" b
TEST_P(${1}) {
	${2}
}$0
endsnippet

snippet casep "instantiate test case parameterize" b
INSTANTIATE_TEST_CASE_P(${1:prefix}, ${2:fixture}, ${3:value});$0
endsnippet

snippet call "expect call" b
EXPECT_CALL(${1})$0
endsnippet

snippet true "expect true" b
EXPECT_TRUE(${1});$0
endsnippet

snippet false "expect false" b
EXPECT_FALSE(${1});$0
endsnippet

snippet eq "expect equal" b
EXPECT_EQ(${1});$0
endsnippet
