################################################################################
# ZLE

# missed default widgets
function vi-kill-word() {
  local WORDCHARS=""
  zle kill-word
}
zle -N vi-kill-word

function custom-which-command() {
  zle autosuggest-clear
  zle which-command
}
zle -N custom-which-command

# x11 copy wrapping
function x11-copy-wrap-widgets() {
  for widget in $@; do
    eval "
    function _x11-copy-wrap-$widget() {
      zle .$widget
      xclip -in -selection clipboard <<<\$CUTBUFFER
    }"
    zle -N $widget _x11-copy-wrap-$widget
  done
}
local copy_widgets=(
  vi-yank vi-yank-eol
)
x11-copy-wrap-widgets $copy_widgets


# x11 paste wrapping
function x11-paste-wrap-widgets() {
  for widget in $@; do
    eval "
    function _x11-paste-wrap-$widget() {
        CUTBUFFER=\$(xclip -out -selection clipboard 2>/dev/null)
        zle .$widget
    }"
    zle -N $widget _x11-paste-wrap-$widget
  done
}
local paste_widgets=(
  vi-put-{before,after}
)
x11-paste-wrap-widgets $paste_widgets


# x11 copy whole line
vi-yank-x-line () {
  print -rn -- $BUFFER | xclip -in -selection primary;
  print -rn -- $BUFFER | xclip -in -selection clipboard;
}
zle -N vi-yank-x-line

# reset prompt. copy from z4h.
function custom_reset_promp() {
  local f
  for f in chpwd "${chpwd_functions[@]}" precmd "${precmd_functions[@]}"; do
    [[ "${+functions[$f]}" == 0 ]] || "$f" &>/dev/null || true
  done
  zle .reset-prompt
  zle -R
}

# cd
function cd-project-root() {
  local root_directory="$(git rev-parse --show-toplevel 2> /dev/null)"
  if [ $? ]; then
    cd "$root_directory" > /dev/null && custom_reset_promp
  fi
}
function cd-home() { cd ~ > /dev/null && custom_reset_promp }
function cd-up() { cd .. > /dev/null && custom_reset_promp }
function cd-back() { cd - > /dev/null && custom_reset_promp }
zle -N cd-project-root
zle -N cd-home
zle -N cd-up
zle -N cd-back


# fix redraw
function custom-redraw-prompt() {
  local precmd
  for precmd in $precmd_functions; do
    $precmd
  done
  zle reset-prompt
}
zle -N custom-redraw-prompt

# fzf wrappers
function fzf-select() {
  setopt localoptions pipefail no_aliases 2> /dev/null
  eval "$FZF_SELECT" | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse $FZF_DEFAULT_OPTS" $(__fzfcmd) -m "$@" | while read item; do
    echo -n "$item"
  done
  local ret=$?
  echo
  return $ret
}


function fzf-cd-project() {
  zle -I

  function _search() {
    test -d "$1" && fd -H -td -d 1 . "$1"
  }

  FZF_SELECT="{                        \
    echo ~/configuration             & \
    _search ~/projects               & \
    _search ~/.local/share/nvim/lazy & \
    _search ~/.antigen/bundles       & \
    _search ~/.tmux/plugins
  }"

  local PROJECT_DIR=$(fzf-select)
  zle reset-prompt

  if [[ -z "$PROJECT_DIR" ]]; then
    return 0
  fi

  cd "$PROJECT_DIR" > /dev/null &&
  zle custom-redraw-prompt
}
zle -N fzf-cd-project


function fzf-paste-file() {
  zle -I

  # Choose root directory
  local root_directory="$(git rev-parse --show-toplevel 2> /dev/null)"
  if [ -z "$root_directory" ]; then
    if [ "$(realpath .)" = "$(realpath ~)" ]; then
      local root_directory=~
    else
      local root_directory=.
    fi
  fi

  # Find directory to paste
  FZF_SELECT="fd -tf . \"$root_directory\""
  local file=$(fzf-select)
  local ret=$?

  # Paste file to zle buffer
  LBUFFER="${LBUFFER}$file"

  zle reset-prompt
  return $ret
}
zle -N fzf-paste-file


function fzf-paste-directory() {
  zle -I

  # Choose root directory
  local root_directory="$(git rev-parse --show-toplevel 2> /dev/null)"
  if [ -z "$root_directory" ]; then
    if [ "$(realpath .)" = "$(realpath ~)" ]; then
      local root_directory=~
    else
      local root_directory=.
    fi
  fi

  # Find directory to paste
  FZF_SELECT="fd -td . \"$root_directory\""
  local directory=$(fzf-select)
  local ret=$?

  # Paste directory to zle buffer
  LBUFFER="${LBUFFER}$directory"

  zle reset-prompt
  return $ret
}
zle -N fzf-paste-directory


fzf-cd-directory() {
  zle -I

  # Choose root directory
  local root_directory="$(git rev-parse --show-toplevel 2> /dev/null)"
  if [ -z "$root_directory" ]; then
    if [ "$(realpath .)" = "$(realpath ~)" ]; then
      local root_directory=~
    else
      local root_directory=.
    fi
  fi

  # Find directory
  FZF_SELECT="fd -td . \"$root_directory\""
  local directory=$(fzf-select)
  zle reset-prompt

  if [[ -z "$directory" ]]; then
    return 0
  fi

  # cd to directory
  cd "$directory"  &&
  zle custom-redraw-prompt
}
zle -N fzf-cd-directory

# fzf kill
k() {
  FZF_SELECT="ps cax | tail -n +2"
  local process=$(fzf-select)

  if [[ -z "$process" ]]; then
    return 0
  fi

  local pid="$(echo "$process" | sed -r -e "s/\s*([[:digit:]]+).*/\1/")"
  kill $@ $pid
}

vi_bind() {
  bindkey -M vicmd $@
  bindkey -M viins $@
}

########################################
# KEY FIXES
#        Backspace
vi_bind '^?'    backward-delete-char
#        Delete
vi_bind "^[[3~" delete-char
#        Home
vi_bind "^[[H"  beginning-of-line
#        End
vi_bind "^[[F"  end-of-line
#        Page down
vi_bind "[6~" end-of-buffer-or-history
#        Page up
vi_bind "[5~" beginning-of-buffer-or-history
#        Insert
vi_bind "[2~" vi-insert
#        Shift-tab
vi_bind "[Z"  reverse-menu-complete

bindkey -r -M viopp j
bindkey -r -M viopp k

########################################
# VISUAL KEYBINDINGS

bindkey -r -M vivis 'jj'
bindkey -r -M vivis 'o'

# movements
bindkey -M vivis 'w' vi-visual-backward-word
bindkey -M vivis 'q' vi-visual-backward-word-end
bindkey -M vivis 'j' vi-visual-forward-word
bindkey -M vivis 'p' vi-visual-forward-word-end

bindkey -M vivis 'W' vi-visual-backward-blank-word
bindkey -M vivis 'Q' vi-visual-backward-blank-word-end
bindkey -M vivis 'J' vi-visual-forward-blank-word
bindkey -M vivis 'P' vi-visual-forward-blank-word-end

bindkey -M vivis 'z' vi-visual-find-prev-char
bindkey -M vivis 'Z' vi-visual-find-prev-char-skip
bindkey -M vivis 'k' vi-visual-find-next-char
bindkey -M vivis 'K' vi-visual-find-next-char-skip
bindkey -M vivis ')' vi-visual-repeat-find
bindkey -M vivis '(' vi-visual-rev-repeat-find

bindkey -M vivis 'on' vi-visual-eol
bindkey -M vivis 'od' vi-visual-bol
bindkey -M vivis 'oh' vi-visual-goto-line
bindkey -M vivis 'ot' vi-visual-goto-first-line

# editing
bindkey -M vivis 'g' vi-visual-insert-bol
bindkey -M vivis 'G' vi-visual-insert-bol
bindkey -M vivis 'h' vi-visual-change
bindkey -M vivis 'H' vi-visual-change
bindkey -M vivis "'" vi-visual-kill-and-vicmd
bindkey -M vivis 't' vi-visual-kill-and-vicmd
bindkey -M vivis 'T' vi-visual-kill-and-vicmd
bindkey -M vivis ',' vi-visual-replace-region

bindkey -M vivis 'm' vi-visual-lowercase-region
bindkey -M vivis 'M' vi-visual-uppercase-region

bindkey -M vivis '^M' vi-visual-yank
bindkey -M vivis 'f'  vi-visual-yank
bindkey -M vivis 'l'  vi-visual-put

# misc
bindkey -M vivis "n'" vi-visual-surround-squote
bindkey -M vivis 'n ' vi-visual-surround-space
bindkey -M vivis 'n"' vi-visual-surround-dquote
bindkey -M vivis 'n(' vi-visual-surround-parenthesis
bindkey -M vivis 'n)' vi-visual-surround-parenthesis

bindkey -M vivis '^[' vi-visual-exit
bindkey -M vivis 'N'  vi-visual-exit-to-vlines
bindkey -M vivis 'r'  vi-visual-exchange-points
bindkey -M vivis '"'  vi-visual-join


# visual line
bindkey -r -M vivli 'o'

bindkey -M vivli 'oh' vi-vlines-goto-line
bindkey -M vivli 'ot' vi-vlines-goto-first-line

bindkey -M vivli 'r' vi-vlines-exchange-points

bindkey -M vivli 'l' vi-vlines-put
bindkey -M vivli 'L' vi-vlines-put

bindkey -M vivli 'j' vi-vlines-down-line
bindkey -M vivli 'k' vi-vlines-up-line
bindkey -M vivli 'n' vi-vlines-exit-to-visual

########################################
# INSERT KEYBINDINGS

# movements
bindkey -v '^w' vi-backward-word
bindkey -v '^q' vi-backward-word-end
bindkey -v '^j' vi-forward-word
bindkey -v '^p' vi-forward-word-end

bindkey -v '^a' vi-backward-blank-word
bindkey -v '^o' vi-backward-blank-word-end
bindkey -v '^e' vi-forward-blank-word
bindkey -v '^u' vi-forward-blank-word-end

bindkey -v '^k' vi-find-next-char
bindkey -v '^z' vi-find-prev-char

########################################
# NORMAL KEYBINDINGS

bindkey -a -r 'o'
bindkey -a -r 'gg'

# movement
bindkey -a 'w' vi-backward-word
bindkey -a 'q' vi-backward-word-end
bindkey -a 'j' vi-forward-word
bindkey -a 'p' vi-forward-word-end

bindkey -a 'W' vi-backward-blank-word
bindkey -a 'Q' vi-backward-blank-word-end
bindkey -a 'J' vi-forward-blank-word
bindkey -a 'P' vi-forward-blank-word-end

bindkey -a 'od' beginning-of-line
bindkey -a 'on' end-of-line
bindkey -a 'oh' end-of-buffer-or-history
bindkey -a 'ot' beginning-of-buffer-or-history

bindkey -a 'z' vi-find-prev-char
bindkey -a 'Z' vi-find-prev-char-skip
bindkey -a 'k' vi-find-next-char
bindkey -a 'K' vi-find-next-char-skip
bindkey -a ')' vi-repeat-find
bindkey -a '(' vi-rev-repeat-find


# editing
bindkey -a 'g' vi-insert
bindkey -a 'G' vi-insert-bol
bindkey -a 'c' vi-add-next
bindkey -a 'C' vi-add-eol

bindkey -a 'h' vi-change
bindkey -a 'H' vi-change-eol
bindkey -a 't' vi-delete
bindkey -a 'T' vi-kill-eol
bindkey -a 'n' vi-visual-mode
bindkey -a 'N' vi-vlines-mode

bindkey -a 'm' undo
bindkey -a 'M' redo

bindkey -a 'f' vi-yank
bindkey -a 'F' vi-yank-eol
bindkey -a 'l' vi-put-after
bindkey -a 'L' vi-put-before

bindkey -a '"' vi-join
bindkey -a "'" vi-delete-char
bindkey -a ',' vi-replace-chars

########################################
# CUSTOM KEYBINDINGS

# misc
stty intr "^C"
stty eof "^D"
vi_bind '^r' clear-screen
vi_bind '^g' custom-which-command
vi_bind '^b' vi-quoted-insert

# editing
vi_bind '^t' kill-buffer

vi_bind '\e^h' backward-kill-word
vi_bind '^h' vi-backward-kill-word
vi_bind '\e^n' kill-word
vi_bind '^n' vi-kill-word

# copy / paste
vi_bind '^f' vi-yank-x-line
vi_bind '^l' vi-put-before

# cd
vi_bind '\em' cd-home
vi_bind "\eb" cd-up
vi_bind '\e.' cd-back


# applications
vi_bind '\eg' fzf-paste-file
vi_bind '\ec' fzf-paste-directory
vi_bind '\er' fzf-history-widget

vi_bind '\eh' fzf-cd-project
vi_bind '\et' cd-project-root
vi_bind '\en' fzf-cd-directory

vi_bind '\eu' autosuggest-execute
vi_bind '\ee' autosuggest-accept
vi_bind '\eo' autosuggest-clear

# vim: set ft=zsh:
